#!/usr/bin/env perl

# modified gffseq.pl (Felix)

use warnings;
use strict;

use Getopt::Long;
use Pod::Usage;

use Bio::Tools::GFF;
use Bio::FeatureIO::gff;
use Bio::Tools::CodonTable;
use Bio::SeqIO;
use Fasta::Parser;

=head1 OPTIONS

=over

=item --gff

Input gff file

=item [--version] [3]

Gff version.

=item --type

Required. Feature type, e.g. CDS, match_part ...

=item --source

Required. Feature annotation source, e.g. maker, snap_masked ...

=item --idtag

Use first of these attributes as ID [Parent,locus_tag,ID]

=item --fna

Add sequence as extra file (if ##FASTA is missing in gff)

=item --aa

Output protein translation of sequence.

=item --codontable

Pick genetic code codon table, default 1.

=item --keepstop

Keep stop-codon as "*" in translated sequence.

=item --linewidth [60]

Wrap sequences this wide, 0 to disable.

=back

=head1 AUTHOR

Thomas Hackl S<thomas.hackl@uni-wuerzburg.de>

=cut

my ($gff,$version,$type,$source,$aa,$keepstop,$idtags,$desctags,$fna,$linewidth,$help,$man, $gtable) =
    ("",3,"","",0,0,'Parent,locus_tag,ID',"gene,product,note,Name","",60,0,0, 1);

GetOptions(
           'gff=s'=>\$gff,
           'fna=s'=>\$fna,
           'version=i'=>\$version,
           'type=s'=>\$type ,
           'source=s'=>\$source,
           'aa!'=>\$aa,
           'codontable=i' => \$gtable,
           'keepstop|k' =>\$keepstop,
           'idtags=s' => \$idtags,
           'desctags=s' => \$desctags, 
           'linewidth' => \$linewidth,
           'help|?'=>\$help ,
           'man'=>\$man
          ) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

@ARGV && !$gff && ($gff=shift @ARGV);

# required
$gff || pod2usage("required: --gff");
$type || pod2usage("required: --type");
$source || pod2usage("required: --source");
my @id_tags = split(",", $idtags);
my @desc_tags = split(",", $desctags);

# Initialise input stream
my $gffio = Bio::Tools::GFF->new(-file => $gff, -gff_version => $version) or die $!;

# Initialise codon table
my $codontable = Bio::Tools::CodonTable->new(-id=>$gtable);

# Initialise sequence storage
my %sequences = ();

# Initialise storage for features
my %transcripts = ();
my @transcript_ids = ();
# Loop over the input stream
while(my $feature = $gffio->next_feature())
{ 

    my $primary_tag =  $feature->primary_tag();
    my $source_tag =  $feature->source_tag();
	
    # Apollo is not placing a source field into the gffs
    # Therefore also a dot as source is needed
    next unless ( $primary_tag eq $type && ( $source_tag eq $source || $source_tag eq "." ) );

    my $id;
    for my $tag (@id_tags) {
        if ($feature->has_tag($tag) && ($feature->get_tag_values($tag))[0] ne '""') {
            ($id) = $feature->get_tag_values($tag);
            last;
        }
    }
    defined($id) || die "couldn't find any id tags (@id_tags)\n";
    push(@{$transcripts{$id}}, $feature);
    push(@transcript_ids, $id); # store transcript order for later
}

# Close input stream
$gffio->close() or die $!;

# Fill sequence storage
if ($fna) {
    my $fp = Fasta::Parser->new(file=>$fna);
    while (my $fa = $fp->next_seq) {
        $sequences{$fa->id} = $fa->seq;
    }
}else {
    %sequences = map { ($_->display_id , $_->seq()) } $gffio->get_seqs();
}

unless (keys %sequences) {
    die "couldn't find ##FASTA in gff, consider --fna";
}

# Start looping to transcripts
foreach my $id (@transcript_ids){

    # Use first CDS element to get strand of transcript
    my $strand = $transcripts{$id}[0]->strand();

    # Use first CDS element to get contig name
    my $contig = $transcripts{$id}[0]->seq_id();

    # Use first CDS element to get contig name
    my $desc = "";
    for my $tag (@desc_tags) {
        if ($transcripts{$id}[0]->has_tag($tag)) {
            $desc.= " $tag=".($transcripts{$id}[0]->get_tag_values($tag))[0]
        }
    }

    # Report Progress
    print STDERR "Working on transcript $id (contig $contig, strand $strand)\n";
    # Sort CDS elements after their starting position
    my $cds_sorted = sort_cds(\@{$transcripts{$id}},$strand);

    # Get Coding sequence
    my $cds_seq = get_cds_seq($cds_sorted, \%sequences, $strand);
    my $seq_length = length($cds_seq);
    
    # Get Gene Locus
    my ($cds_start,$cds_end) = get_loci($cds_sorted);


    # Return result as user specified
    unless($aa){
        $cds_seq = wrap_seq($cds_seq, $linewidth);
	#print ">$id$name contig=$contig coords=$cds_start-$cds_end length=$seq_length$product$note\n$cds_seq\n";
	print ">$id$desc\n$cds_seq\n";
    }else{

        # Get Protein sequence
        my $prot_seq = $codontable->translate($cds_seq);
        $prot_seq =~ s/\*$// unless $keepstop;
        my $seq_length = length($prot_seq);
        $prot_seq = wrap_seq($prot_seq, $linewidth);
        #print ">$id$name contig=$contig coords=$cds_start-$cds_end length=$seq_length$product$note\n$prot_seq\n";
        print ">$id$desc\n$prot_seq\n";
    }

}

#-------------------------------------------------------------------------------
#------------------------------- FUNCTIONS -------------------------------------
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------

sub wrap_seq{
    my ($seq, $line_width) = (@_, 60);
    return $seq if $line_width < 1;
    my $seq_wrap = "";
    $seq_wrap.= $_."\n" for unpack "(A$line_width)*", $seq;
    chomp($seq_wrap);
    return $seq_wrap;
}

sub get_loci {

    my $cds_sorted = shift;

    my $start = $cds_sorted->[0]->start();
    my $end = $cds_sorted->[-1]->end();

    return($start,$end);

}

#-------------------------------------------------------------------------------

sub sort_cds {

    my $transcripts = shift;
    my $strand = shift;

    my @sorted = ();

    if($strand ==  1)
    {
                @sorted = sort { $a->start() <=> $b->start() } @{$transcripts};
    }
    elsif($strand == -1)
    {
                @sorted = sort { $b->start() <=> $a->start() } @{$transcripts};
    }
    else
    {
	die "Unknown strand in CDS!\n";
    }

    return \@sorted;

}

#-------------------------------------------------------------------------------

sub get_cds_seq {

    my $cds_sorted   = shift;
    my $sequences = shift;
    my $strand = shift;
    
    # Initialise CDS storage
    my $cds_seq = "";

    # Loop to CDS of each transcripts
    foreach my $cds (@{$cds_sorted})
    {
	
	# Get Start of CDS
	my $start = $cds->start();
	
	# Get End of CDS
	my $end = $cds->end();
	
	# Get Length of CDS
	my $length = abs($start-$end)+1;
	
	# Get parent sequence of CDS
	my $seq_id = $cds->seq_id();

	# Check for reverse strand
	if($strand == -1)
	{
	    
	    # Extract coding sequence
	    my $temp = substr($sequences->{$seq_id},$start-1,$length);
	    
	    # Get complement seuqence
	    $temp =~ tr/atugcyrswkmbdhvnATUGCYRSWKMBDHVN/taacgryswmkvhdbnTAACGRYSWMKVHDBN/;
	    
	    # Reverse sequence
	    $cds_seq .= reverse($temp);

	}

	# Check for forward strand
	elsif($strand == 1)
	{
	    # Extract coding sequence
	    $cds_seq .= substr($sequences->{$seq_id},$start-1,$length);
	}

    }

    # Return coding sequence
    return $cds_seq;
}

#-------------------------------------------------------------------------------
