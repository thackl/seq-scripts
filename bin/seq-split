#!/usr/bin/env perl
# Created: 02 Apr 2019
# Author: Thomas Hackl, thackl@lim4.de
use warnings;
use strict;
use Getopt::Long  qw(:config no_ignore_case bundling);
use Data::Dumper;
use Fasta::Parser;
use Fastq::Parser;
use File::Temp qw(tempfile);

GetOptions (
    "lump-ungrouped|u" => \(my $ungrouped),
    "group-fields|f=s" => \(my $group_fields = "1,2"),
    "min-group-size|m=i" => \(my $min_group_size = 0),
    "max-open|O=i" => \(my $max_files),
    "out|o=s" => \(my $out_file),
    "help|h!" => \(my $help),
    "debug|D!" => \(my $debug),
) or die("Error in command line arguments\n");

if ($help || @ARGV != 2){
    print "Split one file into many based on a grouping file with a seq_id and a group_id field\n";
    print "Usage: seq-split in.fa group.tsv\n";
    printf " %-19s  %s\n", "-f/--group-fields", "grouping table fields with seq_id and group_id [$group_fields]";
    printf " %-19s  %s\n", "-m/--min-group-size", "ignore groups with fewer members (or add to ungrouped) [$min_group_size]";
    printf " %-19s  %s\n", "-u/--lump-ungrouped", "lump ungrouped seqs in extra file";
    printf " %-19s  %s\n", "-O/--max-open", "open at most this many files [90% ulimit -n]";
    printf " %-19s  %s\n", "-o/--out", "write to these files, use printf wildcard '%s' [in_<group_id>.fa]";
    printf " %-19s  %s\n", "-h/--help", "show this help";
    printf " %-19s  %s\n", "-D/--debug", "show debug messages";
    exit 0;
}

if (!defined($out_file)) {
    $out_file = $ARGV[0] eq '-' ? "stdin.fa" : $ARGV[0];
    $out_file =~ s/\.(.*?)$//;
    $out_file.= "_%s.$1";
}

if (my ($out_dir) = $out_file =~ /^(.*\/)/) {
    print STDERR "creating output directory $out_dir\n";
    mkdir $out_dir || die $!;
}
print STDERR "writing to files $out_file\n";

print STDERR "reading groups file\n";
open(GRP, $ARGV[1]) or die $!;
my %S;
my %G;
my @ri = split(",", $group_fields);
die "Need exactly two group fields (seq_id, group_id). Got: @ri\n" unless @ri == 2;
@ri = map{$_ = $_-1}@ri; # perl cols are 0-off

while (<GRP>) {
    chomp();
    my @r = split(/\t/, $_);
    my ($seq_id, $group_id) = @r[@ri];
    $group_id//="_";
    $S{$seq_id} = $group_id;
    $G{$group_id}++;
}
close GRP;

print STDERR "read ". keys(%G) ." groups\n";

if ($min_group_size) {
    my @G_small = grep{$G{$_} < $min_group_size}keys(%G);
    my %G_small;
    @G_small{@G_small} = (1) x @G_small;
    my @S_small = grep{exists $G_small{$S{$_}}}keys(%S);
    
    print STDERR "ignoring ". keys(%G_small) ." small groups with ". @S_small ." sequences\n";
    
    delete @S{@S_small};
}

$max_files //= int(qx(sh -c "ulimit -n") * .9);

my $ungrp_fh;
if ($ungrouped) {
    open($ungrp_fh, '>', sprintf("$out_file", "ungrouped")) or die $!;
}

my $fa_file = $ARGV[0];
my $pass = 0;
my $tmp_seq = 1;
while ($tmp_seq) {
    $tmp_seq = 0;
    $pass++;
    print STDERR "writing groups pass $pass (max files $max_files)\n";
    my $fp = Fasta::Parser->new(file => $fa_file)->check_format ||
        Fastq::Parser->new(file => $fa_file)->check_format ||
            die("Input file neither Fasta nor Fastq\n");

    my ($tmp_fh, $tmp_file) = tempfile();
    my $open_files = 0;
    my %FH;

    while (my $fa = $fp->next_seq) {
        unless (exists($S{$fa->id})){
            print $ungrp_fh $fa if $ungrouped;
            next;
        }
        my $g = $S{$fa->id};
        if (exists($FH{$g})){
            print {$FH{$g}} $fa;
        }elsif ($open_files < $max_files) {
            open($FH{$g}, '>', sprintf("$out_file", $g)) or die $!;
            ++$open_files;
            print {$FH{$g}} $fa;
        }else{
            $tmp_seq++;
            print $tmp_fh $fa;
        }
    }

    while (my($k,$v) = each %FH) {close $v;}
    $fa_file = $tmp_file;
}

close($ungrp_fh) if $ungrouped;
