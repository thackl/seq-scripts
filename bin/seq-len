#!/usr/bin/env perl
# Created: 17 Jan 2021
# Author: Thomas Hackl, thackl@lim4.de
use warnings;
use strict;
use Getopt::Long  qw(:config no_ignore_case bundling);
use Data::Dumper;

GetOptions (
    "out|o=s" => sub { '-' ne $_[1] and open(STDOUT, '>', $_[1]) || die $! },
    "help|h!" => \(my $help),
    "debug|D!" => \(my $debug),
) or die("Error in command line arguments\n");

if ($help){
    print "Usage: seq-len.pl < in > out\n";
    printf " %-19s  %s\n", "-o/--out", "write to this file [STDOUT]";
    printf " %-19s  %s\n", "-h/--help", "show this help";
    printf " %-19s  %s\n", "-D/--debug", "show debug messages";
    exit 0;
}

my @r;
my $first = <>;

# determine format based on first line
if ($first =~ /^##gff/) { # gff
    while (<>){
        $first = undef;
        if (/^##FASTA/){
            $first = <>;
            last;
        }
    };
    unless (defined($first)){
        print STDERR "No ##FASTA section found in gff\n";
        exit;
    };
}elsif ($first =~ /^LOCUS/) { # gbk
    die "Genbank format not supported, use `gb2gff --fasta <file> | seq-len` as a workaround";
}



$first =~ /^>(\S+)(?:\s(\S+))?/; # fasta
@r = ($1, $2 // "", 0);

while (<>) {
    tr/\r\n//d; # chomp() fails on \r\n;
    if(/^>(\S+)(?:\s(\S+))?/){
        @r = ($1, $2 // "", 0);
    }else{
        $r[2] += length($_)
    };
}
print join("\t", @r), "\n";
